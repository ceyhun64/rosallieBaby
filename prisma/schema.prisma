generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Category {
  hospital_outfit_special_set
  hospital_outfit_set
  toy
}

enum OrderStatus {
  pending // Ã¶deme bekleniyor
  paid // Ã¶deme baÅŸarÄ±lÄ±
  shipped // kargoya verildi
  delivered // teslim edildi
  cancelled // iptal
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  mainImage   String
  description String
  oldPrice    Int
  price       Int
  discount    Int
  category    Category
  subImages   SubImage[]
  favorites   Favorite[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  CartItem    CartItem[]
  OrderItem   OrderItem[] // ðŸ”¹ yeni iliÅŸki
}

model SubImage {
  id        Int     @id @default(autoincrement())
  url       String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}

model User {
  id        Int        @id @default(autoincrement())
  name      String
  surname   String
  email     String     @unique
  password  String
  phone     String?
  favorites Favorite[]
  cartItems CartItem[]
  addresses Address[]
  orders    Order[] // ðŸ”¹ yeni iliÅŸki
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Favorite {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}

model CartItem {
  id            Int      @id @default(autoincrement())
  userId        Int
  productId     Int
  quantity      Int      @default(1)
  strollerCover Boolean?
  customName    String?
  hatToyOption  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId, strollerCover, customName, hatToyOption])
}

model Address {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  title     String
  firstName String
  lastName  String
  address   String
  district  String
  city      String
  zip       String
  phone     String
  country   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscribe {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Settings {
  id           Int      @id @default(1)
  logo         String   @db.VarChar(500)
  heroBg       String   @db.VarChar(500)
  heroMobileBg String   @db.VarChar(500)
  updatedAt    DateTime @updatedAt
}

model Order {
  id            Int         @id @default(autoincrement())
  userId        Int
  status        OrderStatus @default(pending)
  totalPrice    Int
  paidPrice     Int
  currency      String
  paymentMethod String
  transactionId String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     OrderItem[]
  addresses OrderAddress[]
}

model OrderItem {
  id         Int @id @default(autoincrement())
  orderId    Int
  productId  Int
  quantity   Int
  unitPrice  Int
  totalPrice Int

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
}

model OrderAddress {
  id        Int    @id @default(autoincrement())
  orderId   Int
  type      String
  firstName String
  lastName  String
  address   String
  district  String
  city      String
  zip       String
  phone     String
  country   String

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}
