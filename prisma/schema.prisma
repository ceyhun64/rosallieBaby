generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  title     String
  comment   String   @db.Text
  createdAt DateTime @default(now())
  userId    Int
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([productId], map: "Review_productId_fkey")
  @@map("review")
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  mainImage   String
  description String
  oldPrice    Int
  price       Int
  discount    Int
  category    Category
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  CartItem    CartItem[]
  favorites   Favorite[]
  OrderItem   OrderItem[]
  reviews     Review[]
  subImages   SubImage[]

  @@map("product")
}

model SubImage {
  id        Int     @id @default(autoincrement())
  url       String
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId], map: "SubImage_productId_fkey")
  @@map("subimage")
}

model User {
  id        Int        @id @default(autoincrement())
  name      String
  surname   String
  email     String     @unique
  createdAt DateTime   @default(now())
  password  String
  phone     String?
  role      UserRole   @default(USER)
  updatedAt DateTime   @updatedAt
  addresses Address[]
  cartItems CartItem[]
  favorites Favorite[]
  orders    Order[]
  Review    Review[]

  @@map("user")
}

model Favorite {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([productId], map: "Favorite_productId_fkey")
  @@map("favorite")
}

model CartItem {
  id         Int      @id @default(autoincrement())
  userId     Int
  productId  Int
  quantity   Int      @default(1)
  customName String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId, customName])
  @@index([productId], map: "CartItem_productId_fkey")
  @@map("cartitem")
}

model Address {
  id        Int      @id @default(autoincrement())
  userId    Int
  title     String
  firstName String
  lastName  String
  address   String
  district  String
  city      String
  zip       String
  phone     String
  country   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Address_userId_fkey")
  @@map("address")
}

model Subscribe {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subscribe")
}

model Settings {
  id           Int      @id @default(1)
  logo         String   @db.VarChar(500)
  heroBg       String   @db.VarChar(500)
  heroMobileBg String   @db.VarChar(500)
  updatedAt    DateTime @updatedAt

  @@map("settings")
}

model Order {
  id            Int            @id @default(autoincrement())
  userId        Int
  status        OrderStatus    @default(pending)
  totalPrice    Int
  paidPrice     Int
  currency      String
  paymentMethod String
  transactionId String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  addresses     OrderAddress[]
  items         OrderItem[]

  @@index([userId], map: "Order_userId_fkey")
  @@map("order")
}

model OrderItem {
  id         Int     @id @default(autoincrement())
  orderId    Int
  productId  Int
  quantity   Int
  unitPrice  Int
  totalPrice Int
  order      Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product    Product @relation(fields: [productId], references: [id])

  @@index([orderId], map: "OrderItem_orderId_fkey")
  @@index([productId], map: "OrderItem_productId_fkey")
  @@map("orderitem")
}

model OrderAddress {
  id        Int    @id @default(autoincrement())
  orderId   Int
  type      String
  firstName String
  lastName  String
  address   String
  district  String
  city      String
  zip       String
  phone     String
  country   String
  order     Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId], map: "OrderAddress_orderId_fkey")
  @@map("orderaddress")
}

enum Category {
  hospital_outfit_special_set
  hospital_outfit_set
  toy
}

enum OrderStatus {
  pending
  paid
  shipped
  delivered
  cancelled
}

enum UserRole {
  USER
  ADMIN
}
